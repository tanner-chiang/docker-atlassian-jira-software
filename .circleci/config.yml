version: 2
jobs:
  test-building-container:
    docker: # run the steps with Docker
      - image: circleci/ruby
    # do stuff
    steps:
      # checkout sourcecode on to working_directory
      - checkout
      # Once setup_remote_docker is called, a new remote environment is created,
      # and your primary container is configured to use it. This is a way to solve
      # Docker-in-Docker problem described below:
      # https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
      - setup_remote_docker
      # build the image
      - run:
          name: Build the latest version
          command: docker build -t atlassian-jira-software:test .

  build-and-update:
    docker: # run the steps with Docker
      - image: circleci/ruby
    # do stuff
    steps:
      # checkout sourcecode on to working_directory
      - checkout
      # Once setup_remote_docker is called, a new remote environment is created,
      # and your primary container is configured to use it. This is a way to solve
      # Docker-in-Docker problem described below:
      # https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
      - setup_remote_docker
      - add_ssh_keys
      # update Dockerfile to latest version
      - run:
          name: Prepare for latest version
          command: bin/prepare
      # build the image, ensures we do not commit an unbuildable image
      - run:
          name: Build the latest version
          command: docker build -t atlassian-jira-software:latest .
      # deploy the new version
      - run:
          name: Commit and push the latest buildable version
          command: bin/deploy

  build-and-push:
    docker: # run the steps with Docker
      - image: circleci/ruby
    environment:
      DOCKER_IMAGE_NAME: atlassian-jira-software
    # do stuff
    steps:
      # checkout sourcecode on to working_directory
      - checkout
      # Once setup_remote_docker is called, a new remote environment is created,
      # and your primary container is configured to use it. This is a way to solve
      # Docker-in-Docker problem described below:
      # https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
      - setup_remote_docker
      # update Dockerfile to latest version
      - run:
          name: Prepare for latest version
          command: bin/prepare
      # build the image with proper tags
      - run:
          name: Build Docker image
          command: |
            # Build image with commit SHA tag
            docker build -t $DOCKER_IMAGE_NAME:$CIRCLE_SHA1 .
            # Tag as latest if on master branch
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker tag $DOCKER_IMAGE_NAME:$CIRCLE_SHA1 $DOCKER_IMAGE_NAME:latest
            fi
            # Tag with branch name for feature branches
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              docker tag $DOCKER_IMAGE_NAME:$CIRCLE_SHA1 $DOCKER_IMAGE_NAME:$CIRCLE_BRANCH
            fi
      # login to Docker registry
      - run:
          name: Login to Docker Hub
          command: |
            if [ -z "$DOCKER_USER" ] || [ -z "$DOCKER_PASS" ]; then
              echo "Docker credentials not set. Skipping push."
              exit 0
            fi
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      # push Docker images to registry
      - run:
          name: Push Docker images
          command: |
            if [ -z "$DOCKER_USER" ] || [ -z "$DOCKER_PASS" ]; then
              echo "Docker credentials not set. Skipping push."
              exit 0
            fi
            # Always push SHA tagged image
            docker push $DOCKER_USER/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1
            # Push latest if on master branch
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker push $DOCKER_USER/$DOCKER_IMAGE_NAME:latest
            fi
            # Push branch tagged image for feature branches
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              docker push $DOCKER_USER/$DOCKER_IMAGE_NAME:$CIRCLE_BRANCH
            fi

workflows:
  version: 2
  commit:
    jobs:
      - test-building-container

  build-and-push-workflow:
    jobs:
      - build-and-push:
          filters:
            branches:
              only:
                - master
                - develop

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-and-update
      - build-and-push:
          requires:
            - build-and-update
          filters:
            branches:
              only:
                - master
